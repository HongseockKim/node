console.log('log 란');
//console.clear();

/*-------------------------------------------------------------------------------------------------------- */
// log Level
console.log('log'); //개발
console.info('info'); // 중요한 정보 를 남기고 싶을떄
console.warn('warn'); // 경보 단계
console.error('error'); // 정말 심각한 에러 일때  사용자 에러, 시스템 에러 ,..

//이렇게 레벨이 다른 이유는 서버에 배포 할시
//레벨별로 활용했을때 배포 했을때 서버의 심각서을 확인할수 있고 
//쉽게 문제되는 부분을 확인 할수 있다.



/*-------------------------------------------------------------------------------------------------------- */
// assert
console.assert(2 === 3,"not same!");// falase 일 경우에만 출력이된
console.assert(2 === 2,"same!");// 이건 참이라서 출려이 안됨;
/*-------------------------------------------------------------------------------------------------------- */
//print object
const student = {name : "hongseck",age : 30,company:{name:"AC"}};
console.log(student);
console.table(student);//객체를 테이블 형식으로 보여줌 보기 편하게 아주 좋은 기능 !!!
console.dir(student,{showHidden:true,color:false,depth:2});//오브젝트 안에 오브젝트도 확인 시켜줌


/*-------------------------------------------------------------------------------------------------------- */
//measuring time
console.time('for loop');//여기서 시작하고
for(var i = 0; i < 10; i++){//이걸 실행하는 시간
    i++;
}
console.timeEnd('for loop');// 여기서 알려줌 루프 시간 을 알려주는거임

/*-------------------------------------------------------------------------------------------------------- */
//Counting

function a(){
    console.count('a function');// 내가 a 라는 함수를 몇번 실행 시켰는지 알려준다 ; 유용 ...
}
a();
console.countReset('a function');// 루프 중 이 로그 가 있는 곳에  초기화를 해줌
//즉 위 a 함수 1번 밑 a 함수 한번 1 1 이렇게 나옴 ;;
a();


/*-------------------------------------------------------------------------------------------------------- */

//trace

function f1(){
    f2();
}
function f2(){
    f3();
}

function f3(){
    console.log('f3');
    console.trace();// 이 콘솔 은 누가 이함수를 호출했는지 알려준다
}
f1();